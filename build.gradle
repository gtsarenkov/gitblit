import org.apache.tools.ant.filters.*
import com.jdisc.toolchain.tasks.AddFilesToOutputTask

plugins {
    id 'java'
    id 'idea'
    id 'application'
    id "com.github.ben-manes.versions" version "0.51.0"
    id "com.jdisc.toolchain.class-dependencies"
//    id 'com.jdisc.toolchain.github-organization-repo-mirror' version "0.9.0"
}

repositories {
    mavenLocal()
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDir 'src/main/bugtraq'
        }
        output.resourcesDir = "build/classes/java/main"
    }
    test {
        java {
            srcDir 'src/test/bugtraq'
            // strangely enough but generated folder is not used for generation.
            // Generated file is placed under src/test/java.
            // srcDir 'src/test/generated'
        }
    }
    federationClient {
        java {
        }
        runtimeClasspath += main.runtimeClasspath
    }
}

configurations {
    federationClient
}

// Temporary change the build directory to a custom location
buildDir = file('build-gradled')

project('gitblit-bom') {
    apply from: "build-bom.gradle"
}

apply from: "gradle/build-keys.gradle"
apply from: "gradle/build-classlist.gradle"

ant.lifecycleLogLevel = "INFO"
//ant.lifecycleLogLevel = "VERBOSE"
ant.failOnError = true
ant.importBuild('build.xml') { antTargetName ->
    'a-' + antTargetName.replace(":", "-")
}
clean.dependsOn("a-clean")

group = "com.gitblit"
version = "0.10.0"
ext['gb.version'] = "${version} with modern SSH algorithms"
ext['selenium.version'] = project('gitblit-bom').property('selenium.version')

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.register("processResourcesFromJavaSources", Copy) {
    sourceSets.main.java.srcDirs.forEach { srcDir ->
        from(srcDir) {
            exclude '**/*.java'
        }
        into sourceSets.main.output.classesDirs.singleFile
        filter ReplaceTokens, tokens: [
                'gb.version': project.property('gb.version').toString()
        ]
    }
}
processResources.dependsOn processResourcesFromJavaSources

tasks.register("processFederationClientResourcesFromDistribution", Copy) {
    from(layout.projectDirectory.file("src/main/distrib/federation.properties"))
    into sourceSets.federationClient.output.resourcesDir
}
processFederationClientResources.dependsOn processFederationClientResourcesFromDistribution

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.register("mxKeys", GenerateKeys).configure {
    propertiesFile = file("src/main/distrib/data/defaults.properties")
    outputClass = "com.gitblit.Keys"
    todir = project.layout.projectDirectory.dir("src/main/java")
}
compileJava.dependsOn mxKeys

jar {
    manifest {
        attributes 'Main-Class': 'com.gitblit.GitBlitServer'
        attributes 'Specification-Title': "GitBlit Server"
        attributes 'Specification-Version': "${version}"
        attributes 'Specification-Vendor': "Development"
        attributes 'Implementation-Title': project.name
        attributes 'Implementation-Version': project.version
        attributes 'Implementation-Vendor': "Development"
    }
}

application {
    mainClass = 'com.gitblit.GitBlitServer'
    applicationDefaultJvmArgs = ["--add-opens", "java.base/java.lang=ALL-UNNAMED", "--add-opens", "java.base/java.net=ALL-UNNAMED"]
}

tasks.register('runDebug', JavaExec) {
    dependsOn classes
    group = "application"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.gitblit.GitBlitServer'
    //jvmArgs = ["--add-opens", "java.base/java.lang=ALL-UNNAMED", "--add-opens", "java.base/java.net=ALL-UNNAMED", "-Djavax.net.debug=all", "-Djavax.net.ssl=all"]
    jvmArgs = ["--add-opens", "java.base/java.lang=ALL-UNNAMED", "--add-opens", "java.base/java.net=ALL-UNNAMED", "-Djavax.net.debug=all", "-Djava.security.debug=all", "-Djavax.net.ssl=trustmanager"]
}

dependencies {
    implementation(platform(project(':gitblit-bom')))
    implementation("org.slf4j:slf4j-api")
    implementation('org.eclipse.jgit:org.eclipse.jgit')
    implementation('org.eclipse.jgit:org.eclipse.jgit.http.server')
    implementation('org.kohsuke.args4j:args4j-maven-plugin')
    implementation('com.google.inject:guice')
    implementation('com.unboundid:unboundid-ldapsdk')
    implementation('commons-io:commons-io')
    implementation('com.google.code.gson:gson')
    implementation('org.kohsuke:libpam4j')
    implementation('com.github.dblock.waffle:waffle-jna')
    implementation('com.force.api:force-partner-api')
    implementation("org.bouncycastle:bcprov-jdk18on")
    implementation("org.bouncycastle:bcmail-jdk18on")
    implementation("org.bouncycastle:bcpkix-jdk18on")
    implementation('com.toedter:jcalendar')
    implementation('org.apache.sshd:sshd-core')
    implementation('org.apache.lucene:lucene-core')
    implementation('org.apache.lucene:lucene-analyzers-common')
    implementation('org.apache.lucene:lucene-highlighter')
    implementation('org.apache.lucene:lucene-memory')
    implementation('org.apache.lucene:lucene-queryparser')
    implementation('org.codehaus.groovy:groovy-all')
    implementation('org.jetbrains:annotations')
    runtimeOnly('ch.qos.reload4j:reload4j')
    implementation('org.slf4j:slf4j-reload4j')
    implementation('net.i2p.crypto:eddsa')
    implementation('org.apache.mina:mina-core')
    implementation('org.apache.tika:tika-core')
    implementation('org.apache.commons:commons-compress')
    implementation('redis.clients:jedis')
    implementation('org.jsoup:jsoup')
    implementation('org.pegdown:pegdown')

    implementation('org.fusesource.wikitext:wikitext-core')
    implementation('org.fusesource.wikitext:twiki-core')
    implementation('org.fusesource.wikitext:textile-core')
    implementation('org.fusesource.wikitext:tracwiki-core')
    implementation('org.fusesource.wikitext:mediawiki-core')
    implementation('org.fusesource.wikitext:confluence-core')

    implementation('rome:rome')
    implementation('org.freemarker:freemarker')

    implementation('com.google.inject.extensions:guice-servlet')

    implementation('org.eclipse.jetty:jetty-servlet')
    implementation('org.eclipse.jetty:jetty-security')
    implementation('org.eclipse.jetty:jetty-server')
    implementation('org.eclipse.jetty:jetty-continuation')
    implementation('org.eclipse.jetty:jetty-http')
    implementation('org.eclipse.jetty:jetty-io')
    implementation('org.eclipse.jetty:jetty-util')
    implementation('org.eclipse.jetty:jetty-webapp')
    implementation('org.eclipse.jetty:jetty-xml')

    implementation('org.apache.wicket:wicket')
    implementation('org.apache.wicket:wicket-auth-roles')
    implementation('org.apache.wicket:wicket-extensions')
    implementation('ro.fortsoft.pf4j:pf4j')
    implementation('javax.mail:mail:latest.release')
    implementation('javax.servlet:javax.servlet-api')

    federationClient(platform(project(':gitblit-bom')))
    federationClient('org.apache.lucene:lucene-core')
    federationClient('org.apache.lucene:lucene-analyzers-common')
    federationClient('org.apache.lucene:lucene-highlighter')
    federationClient('org.apache.lucene:lucene-memory')
    federationClient('org.apache.lucene:lucene-queryparser')
    federationClient('org.eclipse.jgit:org.eclipse.jgit')
    federationClient('com.google.code.gson:gson')
    federationClient('args4j:args4j')
    federationClient('com.sun.activation:javax.activation:1.2.0')

    testImplementation('org.mockito:mockito-core:2.28.2')
    testImplementation("org.seleniumhq.selenium:selenium-java:${property('selenium.version')}")
    testImplementation("org.seleniumhq.selenium:selenium-support:${property('selenium.version')}")
    testImplementation("org.seleniumhq.selenium:selenium-firefox-driver:${property('selenium.version')}")
    testImplementation('org.apache.httpcomponents:httpclient:4.5.13')
    testImplementation('org.eclipse.jgit:org.eclipse.jgit.ssh.jsch')

    testImplementation('junit:junit:4.13.1')
}

tasks.register('federationClassList', ClassListDependency) {
    dependsOn compileJava
    mainClass = 'com.gitblit.FederationClient'
    classpath = configurations.runtimeClasspath + sourceSets.main.output.classesDirs
    excludePatterns = ['**/.class', '**/*.java', '**/Thumbs.db', '**/*.mkd', '**/*.md', '**/*.css', 'com/gitblit/wicket/**']
    //classes = ['com.gitblit.Keys']
}

jar {
    manifest {
        attributes 'Main-Class': 'com.gitblit.GitBlitServer'
        attributes 'Specification-Title': "GitBlit Server"
        attributes 'Specification-Version': "${version}"
        attributes 'Specification-Vendor': "Development"
        attributes 'Implementation-Title': project.name
        attributes 'Implementation-Version': project.version
        attributes 'Implementation-Vendor': "Development"
    }
}

tasks.register("addFilesToFederationClientOutput", AddFilesToOutputTask).configure {
    dependsOn compileJava, processFederationClientResources
//    classes = ['com.gitblit.Keys']
//    runtimeClasspath = sourceSets.federationClient.runtimeClasspath
//    outputDirs = sourceSets.federationClient.output.classesDirs
//    excludePatterns = ['**/.class', '**/*.java', '**/Thumbs.db', '**/*.mkd', '**/*.md', '**/*.css', 'com/gitblit/wicket/**']
    mainClass = 'com.gitblit.FederationClient'
    classes = ['com.gitblit.Keys']
    classpath = sourceSets.federationClient.runtimeClasspath
    outputDirs = sourceSets.federationClient.output.classesDirs
    excludePatterns = ['**/.class', '**/*.java', '**/Thumbs.db', '**/*.mkd', '**/*.md', '**/*.css', 'com/gitblit/wicket/**']
    outputs.upToDateWhen { false }
//    logger.info("Federation client output on configuration: ${sourceSets.federationClient.output.getClass().name}")
//    sourceSets.federationClient.output.classesDirs.each {  dd -> logger.info("Federation client output on configuration: ${dd.name}") }
//    doLast {
//        def extraFile = file('path/to/extra/classes')
//        if (extraFile.exists()) {
//            sourceSets.federationClient.output.dir(extraFile)
//        }
//    }
}

// TODO: fatJar
task federationClientJar(type: Jar) {
    group = 'build'
    dependsOn addFilesToFederationClientOutput
    archiveBaseName.set('fedclient')
    from sourceSets.federationClient.output.classesDirs

    manifest {
        attributes(
                'Main-Class': addFilesToFederationClientOutput.mainClass,
                //'Class-Path': addFilesToFederationClientOutput.outputFiles.get().files.collect { "ext/${it.name}" }.join(' ')
                'Class-Path': configurations.federationClient.files.collect { "ext/${it.name}" }.join(' ')
        )
    }

    //exclude '**/SomeUnwantedClass.class'
}

distributions {
    federationClient {
        distributionBaseName = 'fedclient'
        contents {
            from(federationClientJar) {
                into '/'
            }
            from(processFederationClientResources) {
                into '/'
            }
            from(configurations.federationClient) {
                into '/ext'
            }
        }
    }
}

artifacts {
    archives federationClientJar
}

tasks.register("mxHelloWorldKeys", GenerateKeys).configure {
    propertiesFile = file("src/test/data/hello-world.properties")
    outputClass = "com.gitblit.tests.HelloworldKeys"
    todir = project.layout.projectDirectory.dir("src/test/java")
}
compileTestJava.dependsOn mxHelloWorldKeys

test {
    useJUnit()
    jvmArgs = [
            "--add-opens", "java.base/java.lang=ALL-UNNAMED",
            "--add-opens", "java.base/java.net=ALL-UNNAMED"
    ]
}

//cloneAndMirrorRepos {
//    githubOrg = 'gitblit-org'
//}